// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Restaurant.DataAccess;

#nullable disable

namespace Restaurant.DataAccess.Migrations
{
    [DbContext(typeof(RestaurantContext))]
    [Migration("20220911193823_categoryManyToOne")]
    partial class categoryManyToOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Restaurant.Data.Models.Address", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Category", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MenuItemGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("MenuItemGuid");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Ingredient", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("Restaurant.Data.Models.ManyToMany.IngredientMenuItem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("IngredientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("IngredientId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("IngredientMenuItem");
                });

            modelBuilder.Entity("Restaurant.Data.Models.ManyToMany.OrderMenuItem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OderId")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OderId");

                    b.ToTable("OrderMenuItem");
                });

            modelBuilder.Entity("Restaurant.Data.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CostumerGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeliveryAddressGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryTime")
                        .HasColumnType("integer");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OrderTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Guid");

                    b.HasIndex("CostumerGuid");

                    b.HasIndex("DeliveryAddressGuid");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Restaurant.Data.Models.User", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<Guid>("AddressGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("AddressGuid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Category", b =>
                {
                    b.HasOne("Restaurant.Data.Models.MenuItem", null)
                        .WithMany("Category")
                        .HasForeignKey("MenuItemGuid");
                });

            modelBuilder.Entity("Restaurant.Data.Models.ManyToMany.IngredientMenuItem", b =>
                {
                    b.HasOne("Restaurant.Data.Models.Ingredient", "Ingredient")
                        .WithMany("MenuItems")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Data.Models.MenuItem", "MenuItem")
                        .WithMany("Ingredients")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("MenuItem");
                });

            modelBuilder.Entity("Restaurant.Data.Models.ManyToMany.OrderMenuItem", b =>
                {
                    b.HasOne("Restaurant.Data.Models.MenuItem", "MenuItem")
                        .WithMany("OrderMenuItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Data.Models.Order", "Oder")
                        .WithMany("OrderMenuItems")
                        .HasForeignKey("OderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Oder");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Order", b =>
                {
                    b.HasOne("Restaurant.Data.Models.User", "Costumer")
                        .WithMany()
                        .HasForeignKey("CostumerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restaurant.Data.Models.Address", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Costumer");

                    b.Navigation("DeliveryAddress");
                });

            modelBuilder.Entity("Restaurant.Data.Models.User", b =>
                {
                    b.HasOne("Restaurant.Data.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Ingredient", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Restaurant.Data.Models.MenuItem", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("Ingredients");

                    b.Navigation("OrderMenuItems");
                });

            modelBuilder.Entity("Restaurant.Data.Models.Order", b =>
                {
                    b.Navigation("OrderMenuItems");
                });
#pragma warning restore 612, 618
        }
    }
}
